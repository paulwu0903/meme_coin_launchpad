// Copyright (c) Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

import { BCS, getRustConfig, BcsReader, BcsWriter } from "@mysten/bcs";
const bcs = new BCS(getRustConfig());

/**
 * Rust representation of the compiled module; generated by the
 * `deserialize` call in the Wasm module.
 */
export interface MoveCompiledModule {
  version: number;
  self_module_handle_idx: number;
  module_handles: {
    address: number;
    name: number;
  }[];
  struct_handles: {
    name: number;
  }[];
  function_handles: {
    module: number;
    name: number;
    parameters: number;
    return_: number;
    type_parameters: number[];
  }[];
  field_handles: {
    name: number;
    // more fields
  };
  friend_decls: []; // TODO!
  struct_def_instantiations: []; // TODO!
  function_instantiations: {
    handle: number;
    type_parameters: number;
  }[];
  field_instantiations: []; // TODO!
  signatures: []; // TODO!
  /**
   * The list of the identifiers in the bytecode.
   * Is referenced by:
   * - module_handles
   * - field_handles
   * - function_handles
   * - struct_handles
   *
   * Identifiers must be sorted by the char code or the resulting
   * bytecode won't be usable on chain as a dependency.
   */
  identifiers: string[];
  address_identifiers: string[];
  constant_pool: {
    type_: string;
    data: number[];
  }[];
  metadata: []; // TODO!
  struct_defs: {
    struct_handle: number;
    field_information: {
      Declared: {
        name: number;
        signature: {
          Struct: number;
        };
      }[];
    };
  }[];
  function_defs: {
    function: number;
    visibility: "Private" | "Public";
    is_entry: boolean;
    acquires_global_resources: [];
    code: {
      locals: number;
      code: any[]; // TODO!
    }[];
  };
}

/**
 * Helper class which wraps the underlying JSON structure.
 * Provides a way to change the identifiers and update the identifier indexes.
 */
export class CompiledModule {
  constructor(public inner: MoveCompiledModule) {}

  /**
   * Quite dangerous method which updates a constant in the constant pool. To make sure
   * that the index is set correctly, the `expectedValue` and `expectedType` must be provided
   * - this way we at least try to minimize the risk of updating a wrong constant.
   */
  updateConstant(
    idx: number,
    value: string,
    expectedValue: string,
    expectedType: string
  ) {
    if (idx >= this.inner.constant_pool.length) {
      throw new Error(
        "Invalid constant index; no constant exists at this index"
      );
    }

    let { type_, data } = this.inner.constant_pool[idx];
    type_ =
      JSON.stringify(type_) == JSON.stringify({ Vector: "U8" })
        ? "string"
        : type_;

    // if (expectedType.toLowerCase() !== type_.toLowerCase()) {
    //   throw new Error(
    //     `Invalid constant type; expected ${expectedType}, got ${type_}`
    //   );
    // }

    let oldValue = bcs.de(type_.toLowerCase(), new Uint8Array(data)).toString();

    // if (oldValue !== expectedValue) {
    //   throw new Error(
    //     `Invalid constant value; expected ${expectedValue}, got ${oldValue}`
    //   );
    // }

    this.inner.constant_pool[idx].data = [
      ...bcs.ser(type_.toLowerCase(), value).toBytes(),
    ];
    console.log('odd: ', oldValue, type_);
    console.log('new: ', expectedValue, expectedType);
    console.log('value: ', value);

    return this;
  }

  /**
   * Update `identifiers`: provide the changeset where keys are the old
   * identifiers and values are the new identifiers.
   */
  changeIdentifiers(identMap: Record<string, string>): CompiledModule {
    // first apply patches - they don't affect indexes; but we need to keep
    // them to compare agains the new sorting order later.
    let identifiers = Object.freeze(
      [...this.inner.identifiers].map((ident) =>
        ident in identMap ? identMap[ident] : ident
      )
    );

    // sort the identifiers - indexes are changed.
    this.inner.identifiers = [...identifiers].sort(
      (a, b) => a.charCodeAt(0) - b.charCodeAt(0)
    );

    // console.log(this.inner.identifiers, identifiers);

    let indexUpdates = new Map();
    for (let ident of identifiers) {
      let oldIdx = identifiers.indexOf(ident);
      let newIdx = this.inner.identifiers.indexOf(ident);
      indexUpdates.set(oldIdx, newIdx);
    }

    const keys = [
      "module_handles",
      "struct_handles",
      "function_handles",
      "field_handles",
    ];

    // update each of the storages with the new index.
    for (let innerKey of keys) {
      // @ts-ignore
      this.inner[innerKey] = this.inner[innerKey].map((handle) => {
        return indexUpdates.has(handle.name)
          ? { ...handle, name: indexUpdates.get(handle.name) }
          : handle;
      });
    }

    // separately patch struct defs
    this.inner.struct_defs = this.inner.struct_defs.map((struct) => {
      let decl = struct.field_information.Declared.map((decl) => ({
        ...decl,
        name: indexUpdates.get(decl.name),
      }));

      return {
        ...struct,
        field_information: { Declared: decl },
      };
    });

    return this;
  }

  toJSON() {
    return this.inner;
  }
}

/**
 * Return the tempate bytecode.
 *
 * Can be acquired by compiling the `template` package and then fetching
 * via the command:
 * ```
 * xxd -c 0 -p build/template/bytecode_modules/template.mv | head -n 1
 * ```
 *
 * Should not be modified manually.
 * Depends on the `Collectible` package and must be rebuilt if the
 * `Collectible` has been republished on the network.
 */
export function getBytecode() {
  return "a11ceb0b060000000b0100140214420356860104dc012005fc019802079404d70408eb086006cb0984010acf0a2c0cfb0af4020def0d0e003001230211021302190222022f02310232023300080200000508000007040000030800000a070001040701000002000401000103010c01000103020c01000103090c010001050c040006060200080b0200090d0700001c000100001e0201000016030400001505060000260701000012080900000f0a010000100b0100012d0d1b0100022e1112010002342809010003171c1d0102031a13140100031d14120100031e1e140100032e25140100033427090100040e220102070c05201f200007290d01010c072a0f01010c072c0d010108082b1516000921191a00150c1506140e09100c101417081a0b100e10112113230f100d1010260f260a1002080007080c00040708030b0701080b0307080c05080003030307080c0208010803040b07010800030307080c01080303060803070b0701080b07080c03030303010303060803060b0701080b030206080303010801010900010b0701080b0209000501080002070b0601090003010b06010900020b0601090007080c010b070109000106080c0105010b07010800050b08010800080308010b070108000b09010800010a0201080d010b05010900070900020a020a020a020b0501080d07080c020b090109000b0801090003070b090109000307080c0107080c01080a0208040b090108000307080a09000901010b080108000208030b0701080003070b070109000307080c01080b01060b0701090001060b060109000742616c616e636504436f696e0c436f696e4d65746164617461084d696e74506f6f6c064f7074696f6e1150726f7465637465645472656173757279035355490d53616c65436f6e646974696f6e0854454d504c4154450b54726561737572794361700e54726561737572794361704b6579095478436f6e74657874035549440355726c036164641c6173736572745f69665f62616c616e63655f6e6f745f656e6f756768256173736572745f69665f6d696e745f706f6f6c5f616d6f756e745f6e6f745f656e6f7567680762616c616e6365046365696c04636f696e09636f6e646974696f6e196372656174655f616e645f66696c6c5f6d696e745f706f6f6c196372656174655f636f696e5f616e645f6d696e745f706f6f6c0f6372656174655f63757272656e63790b64756d6d795f6669656c641464796e616d69635f6f626a6563745f6669656c640c66726f6d5f62616c616e636502696404696e69740c696e746f5f62616c616e6365046d696e740a6d696e745f7072696365036e6577156e65775f756e736166655f66726f6d5f6279746573066f626a656374066f7074696f6e056f776e65720b6f776e65725f6f776e6564107061795f706c6174666f726d5f6665650c706c6174666f726d5f62707311706c6174666f726d5f7265636569766572147075626c69635f667265657a655f6f626a6563740f7075626c69635f7472616e736665720673656e6465720c73686172655f6f626a65637404736f6d650573706c6974037375690874656d706c617465087472616e736665720a74785f636f6e746578740375726c0576616c7565000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002030864000000000000000201090a02070653796d626f6c0a0205044e616d650a020c0b4465736372697074696f6e0a02090869636f6e5f75726c0308e803000000000000030810270000000000000308000000000000000003080100000000000000052039dfa26ecaf49a466cfe33b2e98de9b46425eec170e59eb40d3f69d061a6777800020118010102011b080a0202051f0327032805250324050302031b080a110b06010800140802040201180100000000060b0b000700070607070b0111020c0238000b0238010201010000011f0a002e0a0211070a002e0e010a0211060a002e0d010a0311040b010a00100010011438020b000f020b0238030a0338040b032e11163805020200000018260b0007010702070307040705111738060a0438070c050c090d090b010a0438080c080a04111212010c070d070f030912040b0938090b080b020b030b0411030c060b05380a0b070b060203000000241a0d000a020a03380b0c050a0311120b00380c0b0106e803000000000000070a0b020a032e1116120212030c040b050b032e111638050b04020400000009140a012e380d0a00100010041406102700000000000011050c030b010b030b02380e0b00100010051438020205010000010f0b00350b0135180a020601000000000000001735160b02351a34020600000001110b001000100614350b023518340b01380d21040e05100708270207000000090c0b001002380f0c020b010b02250409050b07092702030202040301010002010202020000";
}
